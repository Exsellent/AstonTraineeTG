/*******************  1 ***************/
/*1.	KISS - Keep It Simple, Stupid ПОЦЕЛУЙ(будь проще, глупец):

•	Принцип: Сохраняйте свой код простым и понятным.
•	Применимость к JavaScript: KISS поощряет написание ясного и лаконичного кода JavaScript, избегая излишней сложности.Это способствует удобочитаемости и ремонтопригодности.
•	Отличие от SOLID: KISS ориентирован на простоту и легкость понимания кода, в то время как принципы SOLID предоставляют рекомендации по проектированию архитектуры программного обеспечения и отношений классов.

2.	DRY - Don't Repeat Yourself (не повторяйтесь):

•	Принцип: избегайте дублирования кода, способствуя повторному использованию кода.
•	Применимость к JavaScript: DRY делает упор на написание модульного и многократно используемого кода JavaScript.Он поощряет извлечение общей функциональности в функции или модули, чтобы избежать избыточности.
•	Отличие от SOLID: DRY касается дублирования кода и повторного использования, в то время как принципы SOLID связаны с высокоуровневым проектированием программного обеспечения, включая управление зависимостями и ответственностью классов.

3.	YAGNI - You Ain't Gonna Need It (Вам это не понадобится):

•	Принцип: реализуйте только то, что необходимо в данный момент, избегая ненужных функций или спекулятивной функциональности.
•	Применимость к JavaScript: YAGNI предлагает избегать добавления в кодовую базу функций, которые в настоящее время не требуются.Он продвигает бережливый и гибкий подход к разработке.
    Отличие от SOLID: YAGNI фокусируется на том, чтобы избегать ненужных функций, в то время как
принципы SOLID управляют дизайном и организацией кода для удобства сопровождения, расширяемости и гибкости. *****************************/


/************************************** 2 **********************************************/

/**Cпособы хранения LocalStorage, SessionStorage и Cookie */
/**1.	localStorage : предоставляет способ хранения данных в браузере без ограничения срока действия. Данные, хранящиеся в localStorage, остаются доступными даже после закрытия и повторного открытия браузера. Можно хранить данные в виде пар ключ-значение, используя localStorage.setItem(key, value) метод, и извлекать данные, используя localStorage.getItem(key). Также можно удалить данные с помощью localStorage.removeItem(key).

2.	sessionStorage : похоже на localStorage, но имеет другую область действия. Данные, хранящиеся в sessionStorage, доступны в той же вкладке браузера или сеансе окна. После завершения сеанса или закрытия вкладки/окна данные очищаются. Использование похоже на localStorage с такими методами, как sessionStorage.setItem(key, value), sessionStorage.getItem(key) и sessionStorage.removeItem(key).

3.	Файлы cookie : файлы cookie представляют собой небольшие текстовые файлы, хранящиеся на компьютере пользователя. Они имеют срок годности и могут использоваться для хранения небольших объемов данных. Файлы cookie отправляются туда и обратно между клиентом и сервером с каждым запросом. Можно установить файл cookie с помощью document.cookie = "key=value; expires=date; path=path"и прочитать файл cookie с помощью document.cookie. Чтобы удалить файл cookie, вы можете установить его срок действия в прошлом.
Эти механизмы хранения имеют разные варианты использования. localStorage и sessionStorage в основном используются для сохранения данных на стороне клиента, а файлы cookie часто используются для хранения информации, специфичной для пользователя, такой как учетные данные для входа в систему или предпочтения, которые необходимо отправлять на сервер с каждым запросом.
Необходимо  отметить, что localStorage, sessionStorage и файлы cookie имеют собственные ограничения на объем хранилища, обычно около 5 МБ для localStorage и sessionStorage, и меньшие ограничения для файлов cookie. Также стоит учитывать последствия для безопасности и соответствующим образом обрабатывать конфиденциальные данные, поскольку доступ к файлам cookie может осуществляться как серверными, так и клиентскими сценариями. */

/************************************* 3 ********************************* */
/**HTML / CSS - Базовая структура html документа, БЭМ методология */

/* HTML (язык гипертекстовой разметки) : HTML — это стандартный язык разметки, используемый для структурирования и представления контента в Интернете. Он состоит из набора элементов, определяющих структуру и семантику веб-страницы.

    Базовая структура HTML документа - это общий шаблон, по которому создаются веб - страницы.Он состоит
из нескольких основных частей https://stackoverflow.com/questions/36703546/what-is-bem-methodology: 

    •  DOCTYPE - это объявление, которое указывает браузеру версию HTML, используемую на странице. Для 
HTML5 достаточно написать <!DOCTYPE html>. 
•  html - это корневой элемент документа, который содержит все остальные элементы. У него есть атрибут 
lang, который указывает язык документа (например, lang="ru" для русского).
    •  head - это элемент, который содержит метаданные о документе, такие как заголовок, кодировка,
 стили и скрипты. Он не отображается на странице напрямую, но влияет на ее работу и внешний вид. 
    •  body - это элемент, который содержит основное содержимое страницы, такое как текст, изображения,
ссылки и формы. Он отображается на странице в браузере. 
    •  title -  это элемент, который содержит текстовый заголовок документа. Он отображается во вкладке
или окне браузера и используется для идентификации страницы.  •  meta - это элемент, который содержит различные метаданные о документе, такие как кодировка, ключевые слова, описание и автор. Он имеет атрибуты name и content, которые определяют тип и значение метаданных. 
    •  link - это элемент, который подключает внешние ресурсы к документу, такие как стилевые файлы
(CSS), иконки или шрифты. Он имеет атрибуты rel, href и type, которые определяют тип, адрес и формат ресурса. 
     •  script - это элемент, который подключает или содержит внутри себя скрипты (JavaScript), которые
выполняются на странице. Он имеет атрибуты src и type, которые определяют адрес и формат скрипта.

    CSS (каскадные таблицы стилей) : CSS — это язык таблиц стилей, используемый для описания 
представления и макета HTML-документов. Это позволяет вам контролировать внешний вид элементов, таких как цвета, шрифты, интервалы и расположение.    

•  Базовая CSS структура - это общий шаблон, по которому создаются стилевые правила для веб-страницы. Он состоит из нескольких основных частей https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structuredhttps://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics:

•  Селектор - это часть правила, которая определяет, к каким элементам HTML применяется стиль. Селектор может быть именем элемента (например, p), классом элемента (например, .card), идентификатором элемента (например, #title) или более сложным выражением (например, p.card > span).

•  Декларация - это часть правила, которая определяет, какие свойства и значения стиля применяются к выбранным элементам. Декларация состоит из свойства и значения, разделенных двоеточием (например, color: red).

•  Правило - это совокупность селектора и декларации (или нескольких деклараций), заключенных в фигурные скобки (например, p { color: red; font-size: 16px; }). Правило определяет один или несколько стилей для одного или нескольких элементов.

•  Комментарий - это часть кода, которая не влияет на работу стилей, но служит для пояснения или документации кода. 

       БЭМ методология - это система для организации и именования классов в HTML и CSS. Она была
разработана командой Яндекса с целью улучшить поддержку и масштабируемость кода. БЭМ основана на разделении компонентов веб-страницы на три типа https://getbem.com/introduction/ https://onjsdev.com/article/bem-methodology-for-organizing-css:  
    •  Блоки - это самостоятельные сущности, которые имеют смысл сами по себе. Примеры: header, 
container, menu, checkbox, input.
    •  Элементы - это части блока, которые не имеют смысла вне блока и семантически связаны с ним. 
Примеры: menu item, list item, checkbox caption, header title.
    •  Модификаторы - это флаги на блоке или элементе, которые меняют их внешний вид или поведение. 
Примеры: disabled, highlighted, checked, fixed, size big, color yellow. */

/************************************* 4 *********************************** */

/**Cпособы позиционирования контента на странице */

/**  Позиционирование - это способ задать местоположение и поведение элементов на веб-странице относительно других элементов, окна браузера или документа. Для позиционирования элементов используется свойство position, которое может принимать следующие значения:
 
    1. static (cтатическое позиционирование) : элементы с position: static располагаются в соответствии
с обычным потоком документа, то есть в том порядке, в котором они идут в HTML-коде. Свойства top, right, bottom и left не влияют на такие элементы.Можно явно управлять положением статически позиционированных элементов.

    2. Relative Positioning (oтносительное позиционирование) : элементы с position: relative
располагаются в соответствии с обычным потоком документа, но затем смещаются относительно своего исходного положения на величину, заданную свойствами top, right, bottom и left. Смещение не влияет на положение других элементов, то есть оставляет за собой место в потоке документа..

    3. Absolute Positioning (aбсолютное позиционирование) : элементы с position: absolute удаляются из 
обычного потока документа, и для них не выделяется место на странице. Они позиционируются относительно ближайшего предка с позиционированием, отличным от static, если такой есть; в противном случае они позиционируются относительно начального контейнера документа. Их конечное положение определяется свойствами top, right, bottom и left.

    4. Fixed Positioning (фиксированное позиционирование) : элементы с position: fixed удаляются из 
обычного потока документа, и для них не выделяется место на странице. Они позиционируются относительно начального контейнера документа, за исключением случая, когда один из их предков имеет свойство transform, perspective или filter, установленное в значение, отличное от none, или свойство will-change, установленное в значение transform, в этом случае этот предок выступает в роли контейнера. Их конечное положение определяется свойствами top, right, bottom и left. Они всегда остаются на одном месте даже при прокрутке страницы.

    5. Float (Плавающее) : это свойство, которое позволяет переместить элемент влево или вправо
 относительно его исходного положения в потоке документа, так что другое содержимое может обтекать его. Это свойство часто используется для создания макетов, в которых элементы могут располагаться рядом. Например, можно сделать так, чтобы изображение обтекалось текстом слева или справа

    6. Flexbox  — это мощный модуль компоновки, который обеспечивает гибкий способ выравнивания и 
распределения пространства между элементами в контейнере. Он предлагает такие свойства, как display: flex, justify-content, align-items и другие для управления позиционированием элементов.

    7. Grid (сетка) : CSS Grid Layout — это еще один модуль компоновки, позволяющий создавать сложные
элементы на основе сетки. Он предлагает такие свойства, как grid-template-columns, grid-template-rows и grid-area для управления позиционированием элементов .  */

/*Для позиционирования элементов также используются свойства:

•  top - задает вертикальное смещение элемента относительно его контейнера или исходного положения.

•  right - задает горизонтальное смещение элемента относительно его контейнера или исходного положения.

•  bottom - задает вертикальное смещение элемента относительно его контейнера или исходного положения.

•  left - задает горизонтальное смещение элемента относительно его контейнера или исходного положения.*/

/************************************ 5 **************************************** */
/**Веса селекторов:

•  Веса селекторов - это относительная мера того, насколько специфичен CSS-селектор в том, как он выбирает HTML-элемент. Она используется в алгоритме специфичности для определения окончательных значений CSS-свойств для данного элемента в DOM-дереве https://www.w3schools.com/css/css_specificity.asphttps://developer.mozilla.org/en-US/docs/Web/CSS/Specificity.

Алгоритм специфичности вычисляет вес CSS-селектора на основе следующих факторов:

•  Inline Styles (встроенные стили). Встроенные стили имеют самую высокую специфичность. Стили, определенные непосредственно в элементе HTML с помощью style атрибута, переопределяют любые другие стили.

•  ID Selectors (селекторы ID) : Селекторы ID имеют более высокую специфичность, чем селекторы классов. Селектор идентификатора обозначается символом #, за которым следует имя идентификатора. Например, #myElement.

•  Class Selectors, Attribute Selectors, and Pseudo-Classes (селекторы классов, селекторы атрибутов и псевдоклассы). Селекторы классов (.class), селекторы атрибутов ([attribute=value]) и псевдоклассы (:hover, :nth-child(), и т. д.) имеют более низкую специфичность, чем селекторы ID.

•  Element Selectors and Pseudo-Elements (селекторы элементов и псевдоэлементы) : Селекторы элементов (например, div, p, h1) и псевдоэлементы (::before, ::after) имеют самую низкую специфичность.

•  Универсальный селектор (*), псевдокласс :where() и его параметры не учитываются при вычислении веса, поэтому их значение равно 0, но они соответствуют элементам. Эти селекторы не влияют на вес специфичности.

•  Комбинаторы, такие как +, >, ~, " ", и ||, могут делать селектор более специфичным в том, что он выбирает, но они не добавляют никакого значения к весу специфичности.

•  Псевдокласс отрицания :not() сам по себе не имеет веса. Также не имеют веса псевдоклассы :is() или :has().

    Вес селектора рассчитывается путем присвоения веса каждому типу селектора:

•  Встроенные стили имеют вес 1000.

•  Каждый селектор ID имеет вес 100.

•  Каждый селектор класса, селектор атрибута или псевдокласс имеет вес 10.

•  Каждый селектор элемента или псевдоэлемент имеет вес 1.

    При сравнении нескольких селекторов специфичность определяется путем суммирования весов селекторов в
каждой категории. Например:

•  div p имеет специфичность 2 (2 селектора элементов).

•  #myElement имеет специфичность 100 (1 селектор ID).

•  .myClass имеет специфичность 10 (селектор 1 класса).

•  div.myClass имеет специфичность 11 (1 селектор элемента + 1 селектор класса).

•  Если к элементу применяются конфликтующие стили, селектор с более высокой специфичностью будет иметь приоритет, независимо от порядка селекторов в файле CSS.

    Понимание специфики селекторов важно для разрешения конфликтов стилей и обеспечения правильного
применения желаемых стилей к элементам. Рекомендуется использовать селекторы надлежащим образом и избегать чрезмерного использования встроенных стилей, чтобы поддерживать поддерживаемую и предсказуемую систему стилей.  */
